{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u05DE\\u05E9\\u05EA\\u05DE\\u05E9\\\\Desktop\\\\TaskManagementApp\\\\TaskManagementApp\\\\task-management-react-app\\\\src\\\\components\\\\TasksList.tsx\";\nimport React from 'react';\nimport TaskItem from './TaskItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TaskList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      tasks: []\n    };\n  }\n\n  loadTasks() {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      mode: 'cors',\n      body: JSON.stringify({})\n    };\n    fetch('api/TaskManagementApi/GetTasks', requestOptions).then(async response => {\n      debugger;\n      const data = await response.json(); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response status\n        const error = data && data.message || response.status;\n        return Promise.reject(error);\n      }\n\n      this.setState({\n        tasks: data.tasks\n      });\n    }).catch(error => {\n      //this.setState({ errorMessage: error.toString() });\n      console.error('There was an error!', error);\n    });\n  }\n\n  render() {\n    const {\n      error,\n      isLoaded,\n      tasks\n    } = this.state;\n    var tasksList = this.state.tasks.map((task, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(TaskItem, {\n          task: task\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 17\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 20\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-header\",\n        children: \"Tasks List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body\",\n        children: tasksList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-footer\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary\",\n          onClick: this.loadTasks.bind(this),\n          children: \"Load tasks\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default TaskList;","map":{"version":3,"sources":["C:/Users/משתמש/Desktop/TaskManagementApp/TaskManagementApp/task-management-react-app/src/components/TasksList.tsx"],"names":["React","TaskItem","TaskList","Component","constructor","props","state","error","isLoaded","tasks","loadTasks","requestOptions","method","headers","mode","body","JSON","stringify","fetch","then","response","data","json","ok","message","status","Promise","reject","setState","catch","console","render","tasksList","map","task","index","bind"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,QAAP,MAAqB,YAArB;;;AASA,MAAMC,QAAN,SAAuBF,KAAK,CAACG,SAA7B,CAAuD;AACnDC,EAAAA,WAAW,CAACC,KAAD,EAA2B;AAClC,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,IADE;AAETC,MAAAA,QAAQ,EAAE,KAFD;AAGTC,MAAAA,KAAK,EAAE;AAHE,KAAb;AAKH;;AAEDC,EAAAA,SAAS,GAAG;AAER,UAAMC,cAA2B,GAAG;AAChCC,MAAAA,MAAM,EAAE,MADwB;AAEhCC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFuB;AAGhCC,MAAAA,IAAI,EAAE,MAH0B;AAIhCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe,EAAf;AAJ0B,KAApC;AAOAC,IAAAA,KAAK,CAAC,gCAAD,EAAmCP,cAAnC,CAAL,CACKQ,IADL,CACU,MAAMC,QAAN,IAAkB;AACpB;AACA,YAAMC,IAAI,GAAG,MAAMD,QAAQ,CAACE,IAAT,EAAnB,CAFoB,CAIpB;;AACA,UAAI,CAACF,QAAQ,CAACG,EAAd,EAAkB;AACd;AACA,cAAMhB,KAAK,GAAIc,IAAI,IAAIA,IAAI,CAACG,OAAd,IAA0BJ,QAAQ,CAACK,MAAjD;AACA,eAAOC,OAAO,CAACC,MAAR,CAAepB,KAAf,CAAP;AACH;;AAED,WAAKqB,QAAL,CAAc;AAAEnB,QAAAA,KAAK,EAAEY,IAAI,CAACZ;AAAd,OAAd;AACH,KAbL,EAcKoB,KAdL,CAcWtB,KAAK,IAAI;AACZ;AACAuB,MAAAA,OAAO,CAACvB,KAAR,CAAc,qBAAd,EAAqCA,KAArC;AACH,KAjBL;AAkBH;;AAEDwB,EAAAA,MAAM,GAAG;AAEL,UAAM;AAAExB,MAAAA,KAAF;AAASC,MAAAA,QAAT;AAAmBC,MAAAA;AAAnB,QAA6B,KAAKH,KAAxC;AACA,QAAI0B,SAAS,GAAG,KAAK1B,KAAL,CAAWG,KAAX,CAAiBwB,GAAjB,CAAqB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAClD,0BAAO;AAAA,+BACH,QAAC,QAAD;AAAU,UAAA,IAAI,EAAED;AAAhB;AAAA;AAAA;AAAA;AAAA;AADG,SAAUC,KAAV;AAAA;AAAA;AAAA;AAAA,cAAP;AAGH,KAJe,CAAhB;AAMA,wBACI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAII;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,kBACKH;AADL;AAAA;AAAA;AAAA;AAAA,cAJJ,eAQI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,+BACI;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,SAAS,EAAC,iBAAhC;AAAkD,UAAA,OAAO,EAAE,KAAKtB,SAAL,CAAe0B,IAAf,CAAoB,IAApB,CAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cARJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAcH;;AA9DkD;;AAgEvD,eAAelC,QAAf","sourcesContent":["import React from 'react';\r\nimport { TaskDetails } from '../entities/TaskManagmentEntities';\r\nimport TaskItem from './TaskItem';\r\ninterface IProps {\r\n}\r\n\r\ninterface IState {\r\n    error: string | null,\r\n    isLoaded: boolean,\r\n    tasks: TaskDetails[]\r\n}\r\nclass TaskList extends React.Component<IProps, IState> {\r\n    constructor(props: {} | Readonly<{}>) {\r\n        super(props);\r\n        this.state = {\r\n            error: null,\r\n            isLoaded: false,\r\n            tasks: []\r\n        };\r\n    }\r\n\r\n    loadTasks() {\r\n\r\n        const requestOptions: RequestInit = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            mode: 'cors',\r\n            body: JSON.stringify({})\r\n        };\r\n\r\n        fetch('api/TaskManagementApi/GetTasks', requestOptions)\r\n            .then(async response => {\r\n                debugger\r\n                const data = await response.json();\r\n\r\n                // check for error response\r\n                if (!response.ok) {\r\n                    // get error message from body or default to response status\r\n                    const error = (data && data.message) || response.status;\r\n                    return Promise.reject(error);\r\n                }\r\n\r\n                this.setState({ tasks: data.tasks })\r\n            })\r\n            .catch(error => {\r\n                //this.setState({ errorMessage: error.toString() });\r\n                console.error('There was an error!', error);\r\n            });\r\n    }\r\n\r\n    render() {\r\n\r\n        const { error, isLoaded, tasks } = this.state;\r\n        var tasksList = this.state.tasks.map((task, index) => {\r\n            return <div key={index}>\r\n                <TaskItem task={task}></TaskItem>\r\n            </div>\r\n        })\r\n\r\n        return (\r\n            <div className=\"card\">\r\n                <div className=\"card-header\">\r\n                   Tasks List\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    {tasksList}\r\n                </div>\r\n             \r\n                <div className=\"card-footer\">\r\n                    <button type=\"button\" className=\"btn btn-primary\" onClick={this.loadTasks.bind(this)}>Load tasks</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default TaskList"]},"metadata":{},"sourceType":"module"}