{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u05DE\\u05E9\\u05EA\\u05DE\\u05E9\\\\Desktop\\\\TaskManagementApp\\\\TaskManagementApp\\\\task-management-react-app\\\\src\\\\components\\\\TasksList.tsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TaskList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      tasks: []\n    };\n  }\n\n  loadTasks() {\n    fetch(\"api/TaskManagementApi/GetTasks\").then(async response => {\n      const data = await response.json(); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response status\n        const error = data && data.message || response.status;\n        return Promise.reject(error);\n      }\n\n      this.setState({\n        isLoaded: true,\n        tasks: result.Tasks\n      }); //    this.setState({ postId: data.id })\n    }).catch(error => {\n      //this.setState({ errorMessage: error.toString() });\n      console.error('There was an error!', error);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body\",\n        children: this.state.tasks ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: this.state.tasks.map(function (item) {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: item.TaskName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 36\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 42\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-footer\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary\",\n          onClick: this.loadTasks,\n          children: \"Load tasks\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default TaskList;","map":{"version":3,"sources":["C:/Users/משתמש/Desktop/TaskManagementApp/TaskManagementApp/task-management-react-app/src/components/TasksList.tsx"],"names":["React","TaskList","Component","constructor","props","state","error","isLoaded","tasks","loadTasks","fetch","then","response","data","json","ok","message","status","Promise","reject","setState","result","Tasks","catch","console","render","map","item","TaskName"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAUA,MAAMC,QAAN,SAAuBD,KAAK,CAACE,SAA7B,CAAuD;AACnDC,EAAAA,WAAW,CAACC,KAAD,EAA2B;AAClC,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,IADE;AAETC,MAAAA,QAAQ,EAAE,KAFD;AAGTC,MAAAA,KAAK,EAAE;AAHE,KAAb;AAKH;;AAEDC,EAAAA,SAAS,GAAG;AAERC,IAAAA,KAAK,CAAC,gCAAD,CAAL,CACCC,IADD,CACM,MAAMC,QAAN,IAAkB;AACpB,YAAMC,IAAI,GAAG,MAAMD,QAAQ,CAACE,IAAT,EAAnB,CADoB,CAIpB;;AACA,UAAI,CAACF,QAAQ,CAACG,EAAd,EAAkB;AACd;AACA,cAAMT,KAAK,GAAIO,IAAI,IAAIA,IAAI,CAACG,OAAd,IAA0BJ,QAAQ,CAACK,MAAjD;AACA,eAAOC,OAAO,CAACC,MAAR,CAAeb,KAAf,CAAP;AACH;;AAED,WAAKc,QAAL,CAAc;AACVb,QAAAA,QAAQ,EAAE,IADA;AAEVC,QAAAA,KAAK,EAAEa,MAAM,CAACC;AAFJ,OAAd,EAXoB,CAepB;AACH,KAjBD,EAkBKC,KAlBL,CAkBWjB,KAAK,IAAI;AACZ;AACAkB,MAAAA,OAAO,CAAClB,KAAR,CAAc,qBAAd,EAAqCA,KAArC;AACH,KArBL;AAsBH;;AAEDmB,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,kBACK,KAAKpB,KAAL,CAAWG,KAAX,gBAAoB;AAAA,oBAChB,KAAKH,KAAL,CAAWG,KAAX,CAAiBkB,GAAjB,CAAqB,UAAUC,IAAV,EAAgB;AAClC,gCAAO;AAAA,wBAAMA,IAAI,CAACC;AAAX;AAAA;AAAA;AAAA;AAAA,oBAAP;AACH,WAFA;AADgB;AAAA;AAAA;AAAA;AAAA,gBAApB,GAKS;AANd;AAAA;AAAA;AAAA;AAAA,cADJ,eASI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,+BACI;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,SAAS,EAAC,iBAAhC;AAAkD,UAAA,OAAO,EAAE,KAAKnB,SAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cATJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAeH;;AApDkD;;AAsDvD,eAAeR,QAAf","sourcesContent":["import React from 'react';\r\nimport { TaskDetails, Response } from '../entities/TaskManagmentEntities';\r\ninterface IProps {\r\n}\r\n\r\ninterface IState {\r\n    error: string | null,\r\n    isLoaded: boolean,\r\n    tasks: TaskDetails[]\r\n}\r\nclass TaskList extends React.Component<IProps, IState> {\r\n    constructor(props: {} | Readonly<{}>) {\r\n        super(props);\r\n        this.state = {\r\n            error: null,\r\n            isLoaded: false,\r\n            tasks: []\r\n        };\r\n    }\r\n\r\n    loadTasks() {\r\n\r\n        fetch(\"api/TaskManagementApi/GetTasks\")\r\n        .then(async response => {\r\n            const data = await response.json();\r\n\r\n\r\n            // check for error response\r\n            if (!response.ok) {\r\n                // get error message from body or default to response status\r\n                const error = (data && data.message) || response.status;\r\n                return Promise.reject(error);\r\n            }\r\n\r\n            this.setState({\r\n                isLoaded: true,\r\n                tasks: result.Tasks\r\n            });\r\n            //    this.setState({ postId: data.id })\r\n        })\r\n            .catch(error => {\r\n                //this.setState({ errorMessage: error.toString() });\r\n                console.error('There was an error!', error);\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                    {this.state.tasks ? (<div>\r\n                        {this.state.tasks.map(function (item) {\r\n                            return <div>{item.TaskName}</div>\r\n                        })\r\n                        }\r\n                    </div>) : null}\r\n                </div>\r\n                <div className=\"card-footer\">\r\n                    <button type=\"button\" className=\"btn btn-primary\" onClick={this.loadTasks}>Load tasks</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default TaskList"]},"metadata":{},"sourceType":"module"}